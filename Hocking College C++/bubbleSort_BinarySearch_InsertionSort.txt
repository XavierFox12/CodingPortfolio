int binarySearch(const int list[], int listLength, int searchItem)
{
	int first = 0;
	int last = listLength - 1;
	int mid;
	bool found = false;
	
	while (first <= last && !found)
	{
		mid = (first + last) / 2;
		
		if (list[mid] == searchItem)
			found = true;
		else if (list[mid] > searchItem)
			last = mid - 1;
		else
			first = mid + 1;
	}
	
	if (found)
		return mid;
	else
		return -1;
}

void bubbleSort(int list[], int length);
{
	int temp;
	int iteration;
	int index;
	
	for (iteration = 1; iteration < length; iteration++)
	{
		for (index = 0; index < length - iteration; index++)
			if (list[index] > list[index + 1])
			{
				temp = list[index];
				list[index] = list[index + 1];
				list[index + 1] = temp;
			}
	}
}

void insertionSort(int list[], int listLength)
{
	int firstOutOfOrder, location;
	int temp;
	
	for (firstOutOfOrder = 1; firstOutOfOrder < listLength; firstOutOfOrder++)
		if (list[firstOutOfOrder] < list[firstOutOfOrder - 1])
		{
			temp = list[firstOutOfOrder];
			location = firstOutOfOrder;
			
			do
			{
				list[location] = list[location - 1];
				location--;
			}
			while (location > 0 && list[location - 1] > temp);
			
			list[location] = temp;
		}
}